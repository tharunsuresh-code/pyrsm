{
    "cells": [
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# Logistic Regression\n",
                "\n",
                "Estimate a Logistic regression model for binary classification"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 1,
            "metadata": {},
            "outputs": [],
            "source": [
                "import pyrsm as rsm\n",
                "import matplotlib as mpl\n",
                "\n",
                "# increase plot resolution\n",
                "mpl.rcParams[\"figure.dpi\"] = 100\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 2,
            "metadata": {},
            "outputs": [],
            "source": [
                "## setup pyrsm for autoreload\n",
                "%reload_ext autoreload\n",
                "%autoreload 2\n",
                "%aimport pyrsm"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "### Example\n",
                "\n",
                "As an example we will use a dataset that describes the survival status of individual passengers on the Titanic. The principal source for data about Titanic passengers is the Encyclopedia Titanic. One of the original sources is Eaton & Haas (1994) Titanic: Triumph and Tragedy, Patrick Stephens Ltd, which includes a passenger list created by many researchers and edited by Michael A. Findlay. Suppose we want to investigate which factors are most strongly associated with the chance of surviving the sinking of the Titanic. Lets focus on four variables in the database:\n",
                "\n",
                "- survived = a factor with levels `Yes` and `No`\n",
                "- pclass = Passenger Class (1st, 2nd, 3rd). This is a proxy for socio-economic status (SES) 1st ~ Upper; 2nd ~ Middle; 3rd ~ Lower\n",
                "- sex = Sex (female, male)\n",
                "- age = Age in years\n",
                "\n",
                "Select `survived` as the response variable and `Yes` in **Choose level**. Select `pclass`, `sex` and `age` as the explanatory variables. In the screenshot below we see that each of the coefficients is statistically significant (p.value < .05) and that the model has some predictive power (Chi-squared statistic < .05). Unfortunately the coefficients from a logistic regression model are difficult to interpret. The `OR` column provides estimated odds-ratios. We see that the odds of survival were significantly lower for 2nd and 3rd class passengers compared to 1st class passenger. The odds of survival for males were also lower than for females. While the effect of age is statically significant, for each extra year in age the odds of survival are not as strongly affected (see also the standardized coefficient).\n",
                "\n",
                "For each of the explanatory variables the following null and alternate hypotheses can be formulated for the odds ratios:\n",
                "\n",
                "* H0: The odds-ratio associated with explanatory variable x is equal to 1\n",
                "* Ha: The odds-ratio associated with explanatory variable x is not equal to 1\n",
                "\n",
                "The odds-ratios from the logistic regression can be interpreted as follows:\n",
                "\n",
                "- Compared to 1st class passengers, the odds of survival for 2nd class passengers was 72% lower, keeping all other variables in the model constant.\n",
                "- Compared to 1st class passengers, the odds of survival for 3rd class passengers was 89.8% lower, keeping all other variables in the model constant.\n",
                "- Compared to female passengers, the odds of survival for male passengers was 91.7% lower, keeping all other variables in the model constant.\n",
                "- For an increase in passenger age of 1 year the odds of survival decreased by 3.4%, keeping all other variables in the model constant."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 3,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": [
                            "<div>\n",
                            "<style scoped>\n",
                            "    .dataframe tbody tr th:only-of-type {\n",
                            "        vertical-align: middle;\n",
                            "    }\n",
                            "\n",
                            "    .dataframe tbody tr th {\n",
                            "        vertical-align: top;\n",
                            "    }\n",
                            "\n",
                            "    .dataframe thead th {\n",
                            "        text-align: right;\n",
                            "    }\n",
                            "</style>\n",
                            "<table border=\"1\" class=\"dataframe\">\n",
                            "  <thead>\n",
                            "    <tr style=\"text-align: right;\">\n",
                            "      <th></th>\n",
                            "      <th>pclass</th>\n",
                            "      <th>survived</th>\n",
                            "      <th>sex</th>\n",
                            "      <th>age</th>\n",
                            "      <th>sibsp</th>\n",
                            "      <th>parch</th>\n",
                            "      <th>fare</th>\n",
                            "      <th>name</th>\n",
                            "      <th>cabin</th>\n",
                            "      <th>embarked</th>\n",
                            "    </tr>\n",
                            "  </thead>\n",
                            "  <tbody>\n",
                            "    <tr>\n",
                            "      <th>0</th>\n",
                            "      <td>1st</td>\n",
                            "      <td>Yes</td>\n",
                            "      <td>female</td>\n",
                            "      <td>29.0000</td>\n",
                            "      <td>0</td>\n",
                            "      <td>0</td>\n",
                            "      <td>211.337494</td>\n",
                            "      <td>Allen, Miss. Elisabeth Walton</td>\n",
                            "      <td>B5</td>\n",
                            "      <td>Southampton</td>\n",
                            "    </tr>\n",
                            "    <tr>\n",
                            "      <th>1</th>\n",
                            "      <td>1st</td>\n",
                            "      <td>Yes</td>\n",
                            "      <td>male</td>\n",
                            "      <td>0.9167</td>\n",
                            "      <td>1</td>\n",
                            "      <td>2</td>\n",
                            "      <td>151.550003</td>\n",
                            "      <td>Allison, Master. Hudson Trevor</td>\n",
                            "      <td>C22 C26</td>\n",
                            "      <td>Southampton</td>\n",
                            "    </tr>\n",
                            "    <tr>\n",
                            "      <th>2</th>\n",
                            "      <td>1st</td>\n",
                            "      <td>No</td>\n",
                            "      <td>female</td>\n",
                            "      <td>2.0000</td>\n",
                            "      <td>1</td>\n",
                            "      <td>2</td>\n",
                            "      <td>151.550003</td>\n",
                            "      <td>Allison, Miss. Helen Loraine</td>\n",
                            "      <td>C22 C26</td>\n",
                            "      <td>Southampton</td>\n",
                            "    </tr>\n",
                            "    <tr>\n",
                            "      <th>3</th>\n",
                            "      <td>1st</td>\n",
                            "      <td>No</td>\n",
                            "      <td>male</td>\n",
                            "      <td>30.0000</td>\n",
                            "      <td>1</td>\n",
                            "      <td>2</td>\n",
                            "      <td>151.550003</td>\n",
                            "      <td>Allison, Mr. Hudson Joshua Crei</td>\n",
                            "      <td>C22 C26</td>\n",
                            "      <td>Southampton</td>\n",
                            "    </tr>\n",
                            "    <tr>\n",
                            "      <th>4</th>\n",
                            "      <td>1st</td>\n",
                            "      <td>No</td>\n",
                            "      <td>female</td>\n",
                            "      <td>25.0000</td>\n",
                            "      <td>1</td>\n",
                            "      <td>2</td>\n",
                            "      <td>151.550003</td>\n",
                            "      <td>Allison, Mrs. Hudson J C (Bessi</td>\n",
                            "      <td>C22 C26</td>\n",
                            "      <td>Southampton</td>\n",
                            "    </tr>\n",
                            "    <tr>\n",
                            "      <th>...</th>\n",
                            "      <td>...</td>\n",
                            "      <td>...</td>\n",
                            "      <td>...</td>\n",
                            "      <td>...</td>\n",
                            "      <td>...</td>\n",
                            "      <td>...</td>\n",
                            "      <td>...</td>\n",
                            "      <td>...</td>\n",
                            "      <td>...</td>\n",
                            "      <td>...</td>\n",
                            "    </tr>\n",
                            "    <tr>\n",
                            "      <th>1038</th>\n",
                            "      <td>3rd</td>\n",
                            "      <td>No</td>\n",
                            "      <td>male</td>\n",
                            "      <td>45.5000</td>\n",
                            "      <td>0</td>\n",
                            "      <td>0</td>\n",
                            "      <td>7.225000</td>\n",
                            "      <td>Youseff, Mr. Gerious</td>\n",
                            "      <td></td>\n",
                            "      <td>Cherbourg</td>\n",
                            "    </tr>\n",
                            "    <tr>\n",
                            "      <th>1039</th>\n",
                            "      <td>3rd</td>\n",
                            "      <td>No</td>\n",
                            "      <td>female</td>\n",
                            "      <td>14.5000</td>\n",
                            "      <td>1</td>\n",
                            "      <td>0</td>\n",
                            "      <td>14.454200</td>\n",
                            "      <td>Zabour, Miss. Hileni</td>\n",
                            "      <td></td>\n",
                            "      <td>Cherbourg</td>\n",
                            "    </tr>\n",
                            "    <tr>\n",
                            "      <th>1040</th>\n",
                            "      <td>3rd</td>\n",
                            "      <td>No</td>\n",
                            "      <td>male</td>\n",
                            "      <td>26.5000</td>\n",
                            "      <td>0</td>\n",
                            "      <td>0</td>\n",
                            "      <td>7.225000</td>\n",
                            "      <td>Zakarian, Mr. Mapriededer</td>\n",
                            "      <td></td>\n",
                            "      <td>Cherbourg</td>\n",
                            "    </tr>\n",
                            "    <tr>\n",
                            "      <th>1041</th>\n",
                            "      <td>3rd</td>\n",
                            "      <td>No</td>\n",
                            "      <td>male</td>\n",
                            "      <td>27.0000</td>\n",
                            "      <td>0</td>\n",
                            "      <td>0</td>\n",
                            "      <td>7.225000</td>\n",
                            "      <td>Zakarian, Mr. Ortin</td>\n",
                            "      <td></td>\n",
                            "      <td>Cherbourg</td>\n",
                            "    </tr>\n",
                            "    <tr>\n",
                            "      <th>1042</th>\n",
                            "      <td>3rd</td>\n",
                            "      <td>No</td>\n",
                            "      <td>male</td>\n",
                            "      <td>29.0000</td>\n",
                            "      <td>0</td>\n",
                            "      <td>0</td>\n",
                            "      <td>7.875000</td>\n",
                            "      <td>Zimmerman, Mr. Leo</td>\n",
                            "      <td></td>\n",
                            "      <td>Southampton</td>\n",
                            "    </tr>\n",
                            "  </tbody>\n",
                            "</table>\n",
                            "<p>1043 rows × 10 columns</p>\n",
                            "</div>"
                        ],
                        "text/plain": [
                            "     pclass survived     sex      age  sibsp  parch        fare  \\\n",
                            "0       1st      Yes  female  29.0000      0      0  211.337494   \n",
                            "1       1st      Yes    male   0.9167      1      2  151.550003   \n",
                            "2       1st       No  female   2.0000      1      2  151.550003   \n",
                            "3       1st       No    male  30.0000      1      2  151.550003   \n",
                            "4       1st       No  female  25.0000      1      2  151.550003   \n",
                            "...     ...      ...     ...      ...    ...    ...         ...   \n",
                            "1038    3rd       No    male  45.5000      0      0    7.225000   \n",
                            "1039    3rd       No  female  14.5000      1      0   14.454200   \n",
                            "1040    3rd       No    male  26.5000      0      0    7.225000   \n",
                            "1041    3rd       No    male  27.0000      0      0    7.225000   \n",
                            "1042    3rd       No    male  29.0000      0      0    7.875000   \n",
                            "\n",
                            "                                 name    cabin     embarked  \n",
                            "0       Allen, Miss. Elisabeth Walton       B5  Southampton  \n",
                            "1      Allison, Master. Hudson Trevor  C22 C26  Southampton  \n",
                            "2        Allison, Miss. Helen Loraine  C22 C26  Southampton  \n",
                            "3     Allison, Mr. Hudson Joshua Crei  C22 C26  Southampton  \n",
                            "4     Allison, Mrs. Hudson J C (Bessi  C22 C26  Southampton  \n",
                            "...                               ...      ...          ...  \n",
                            "1038             Youseff, Mr. Gerious             Cherbourg  \n",
                            "1039             Zabour, Miss. Hileni             Cherbourg  \n",
                            "1040        Zakarian, Mr. Mapriededer             Cherbourg  \n",
                            "1041              Zakarian, Mr. Ortin             Cherbourg  \n",
                            "1042               Zimmerman, Mr. Leo           Southampton  \n",
                            "\n",
                            "[1043 rows x 10 columns]"
                        ]
                    },
                    "execution_count": 3,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "titanic, titanic_description = rsm.load_data(pkg=\"data\", name=\"titanic\")\n",
                "titanic\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 4,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/markdown": [
                            "## Titanic\n",
                            "\n",
                            "This dataset describes the survival status of individual passengers on the Titanic. The titanic data frame does not contain information from the crew, but it does contain actual ages of (some of) the passengers. The principal source for data about Titanic passengers is the Encyclopedia Titanica. One of the original sources is Eaton & Haas (1994) Titanic: Triumph and Tragedy, Patrick Stephens Ltd, which includes a passenger list created by many researchers and edited by Michael A. Findlay.\n",
                            "\n",
                            "## Variables\n",
                            "\n",
                            "* survival - Survival (Yes, No)\n",
                            "* pclass - Passenger Class (1st, 2nd, 3rd)\n",
                            "* sex - Sex (female, male)\n",
                            "* age - Age in years\n",
                            "* sibsp - Number of Siblings/Spouses Aboard\n",
                            "* parch - Number of Parents/Children Aboard\n",
                            "* fare - Passenger Fare\n",
                            "* name - Name\n",
                            "* cabin - Cabin\n",
                            "* embarked - Port of Embarkation (Cherbourg, Queenstown, Southampton)\n",
                            "\n",
                            "##  Notes\n",
                            "\n",
                            "`pclass` is a proxy for socio-economic status (SES) 1st ~ Upper; 2nd ~ Middle; 3rd ~ Lower\n",
                            "\n",
                            "Age is in Years; Fractional if Age less than One (1). If the Age is Estimated, it is in the form xx.5\n",
                            "\n",
                            "With respect to the family relation variables (i.e. sibsp and parch) some relations were ignored.  The following are the definitions used for sibsp and parch.\n",
                            "\n",
                            "Sibling:  Brother, Sister, Stepbrother, or Stepsister of Passenger Aboard Titanic\n",
                            "Spouse:   Husband or Wife of Passenger Aboard Titanic (Mistresses and Fiances Ignored)\n",
                            "Parent:   Mother or Father of Passenger Aboard Titanic\n",
                            "Child:    Son, Daughter, Stepson, or Stepdaughter of Passenger Aboard Titanic\n",
                            "\n",
                            "Other family relatives excluded from this study include cousins, nephews/nieces, aunts/uncles, and in-laws. Some children travelled only with a nanny, therefore parch=0 for them.  As well, some travelled with very close friends or neighbors in a village, however, the definitions do not support such relations.\n",
                            "\n",
                            "Note: Missing values and the `ticket` variable were removed from the data\n",
                            "\n",
                            "## Related reading\n",
                            "\n",
                            "<a href=\"http://phys.org/news/2012-07-shipwrecks-men-survive.html\" target=\"_blank\">In shipwrecks, men more likely to survive</a>"
                        ],
                        "text/plain": [
                            "<IPython.core.display.Markdown object>"
                        ]
                    },
                    "metadata": {},
                    "output_type": "display_data"
                }
            ],
            "source": [
                "rsm.md(titanic_description)\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 5,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "text/html": [
                            "<div>\n",
                            "<style scoped>\n",
                            "    .dataframe tbody tr th:only-of-type {\n",
                            "        vertical-align: middle;\n",
                            "    }\n",
                            "\n",
                            "    .dataframe tbody tr th {\n",
                            "        vertical-align: top;\n",
                            "    }\n",
                            "\n",
                            "    .dataframe thead th {\n",
                            "        text-align: right;\n",
                            "    }\n",
                            "</style>\n",
                            "<table border=\"1\" class=\"dataframe\">\n",
                            "  <thead>\n",
                            "    <tr style=\"text-align: right;\">\n",
                            "      <th></th>\n",
                            "      <th>pclass</th>\n",
                            "      <th>survived</th>\n",
                            "      <th>sex</th>\n",
                            "      <th>age</th>\n",
                            "      <th>sibsp</th>\n",
                            "      <th>parch</th>\n",
                            "      <th>fare</th>\n",
                            "      <th>name</th>\n",
                            "      <th>cabin</th>\n",
                            "      <th>embarked</th>\n",
                            "    </tr>\n",
                            "  </thead>\n",
                            "  <tbody>\n",
                            "    <tr>\n",
                            "      <th>0</th>\n",
                            "      <td>1st</td>\n",
                            "      <td>Yes</td>\n",
                            "      <td>female</td>\n",
                            "      <td>29.0000</td>\n",
                            "      <td>0</td>\n",
                            "      <td>0</td>\n",
                            "      <td>211.337494</td>\n",
                            "      <td>Allen, Miss. Elisabeth Walton</td>\n",
                            "      <td>B5</td>\n",
                            "      <td>Southampton</td>\n",
                            "    </tr>\n",
                            "    <tr>\n",
                            "      <th>1</th>\n",
                            "      <td>1st</td>\n",
                            "      <td>Yes</td>\n",
                            "      <td>male</td>\n",
                            "      <td>0.9167</td>\n",
                            "      <td>1</td>\n",
                            "      <td>2</td>\n",
                            "      <td>151.550003</td>\n",
                            "      <td>Allison, Master. Hudson Trevor</td>\n",
                            "      <td>C22 C26</td>\n",
                            "      <td>Southampton</td>\n",
                            "    </tr>\n",
                            "    <tr>\n",
                            "      <th>2</th>\n",
                            "      <td>1st</td>\n",
                            "      <td>No</td>\n",
                            "      <td>female</td>\n",
                            "      <td>2.0000</td>\n",
                            "      <td>1</td>\n",
                            "      <td>2</td>\n",
                            "      <td>151.550003</td>\n",
                            "      <td>Allison, Miss. Helen Loraine</td>\n",
                            "      <td>C22 C26</td>\n",
                            "      <td>Southampton</td>\n",
                            "    </tr>\n",
                            "    <tr>\n",
                            "      <th>3</th>\n",
                            "      <td>1st</td>\n",
                            "      <td>No</td>\n",
                            "      <td>male</td>\n",
                            "      <td>30.0000</td>\n",
                            "      <td>1</td>\n",
                            "      <td>2</td>\n",
                            "      <td>151.550003</td>\n",
                            "      <td>Allison, Mr. Hudson Joshua Crei</td>\n",
                            "      <td>C22 C26</td>\n",
                            "      <td>Southampton</td>\n",
                            "    </tr>\n",
                            "    <tr>\n",
                            "      <th>4</th>\n",
                            "      <td>1st</td>\n",
                            "      <td>No</td>\n",
                            "      <td>female</td>\n",
                            "      <td>25.0000</td>\n",
                            "      <td>1</td>\n",
                            "      <td>2</td>\n",
                            "      <td>151.550003</td>\n",
                            "      <td>Allison, Mrs. Hudson J C (Bessi</td>\n",
                            "      <td>C22 C26</td>\n",
                            "      <td>Southampton</td>\n",
                            "    </tr>\n",
                            "  </tbody>\n",
                            "</table>\n",
                            "</div>"
                        ],
                        "text/plain": [
                            "  pclass survived     sex      age  sibsp  parch        fare  \\\n",
                            "0    1st      Yes  female  29.0000      0      0  211.337494   \n",
                            "1    1st      Yes    male   0.9167      1      2  151.550003   \n",
                            "2    1st       No  female   2.0000      1      2  151.550003   \n",
                            "3    1st       No    male  30.0000      1      2  151.550003   \n",
                            "4    1st       No  female  25.0000      1      2  151.550003   \n",
                            "\n",
                            "                              name    cabin     embarked  \n",
                            "0    Allen, Miss. Elisabeth Walton       B5  Southampton  \n",
                            "1   Allison, Master. Hudson Trevor  C22 C26  Southampton  \n",
                            "2     Allison, Miss. Helen Loraine  C22 C26  Southampton  \n",
                            "3  Allison, Mr. Hudson Joshua Crei  C22 C26  Southampton  \n",
                            "4  Allison, Mrs. Hudson J C (Bessi  C22 C26  Southampton  "
                        ]
                    },
                    "execution_count": 5,
                    "metadata": {},
                    "output_type": "execute_result"
                }
            ],
            "source": [
                "titanic.head()"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 6,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "Logistic regression (GLM)\n",
                        "Data                 : titanic\n",
                        "Response variable    : survived\n",
                        "Level                : Yes\n",
                        "Explanatory variables: pclass, sex, age\n",
                        "Null hyp.: There is no effect of x on survived\n",
                        "Alt. hyp.: There is an effect of x on survived\n",
                        "\n",
                        "                 OR      OR%  coefficient  std.error  z.value p.value     \n",
                        "Intercept    33.607  3260.7%         3.51      0.327   10.752  < .001  ***\n",
                        "pclass[2nd]   0.280   -72.0%        -1.27      0.226   -5.649  < .001  ***\n",
                        "pclass[3rd]   0.102   -89.8%        -2.28      0.226  -10.104  < .001  ***\n",
                        "sex[male]     0.083   -91.7%        -2.49      0.166  -14.996  < .001  ***\n",
                        "age           0.966    -3.4%        -0.03      0.006   -5.437  < .001  ***\n",
                        "\n",
                        "Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n",
                        "\n",
                        "Pseudo R-squared (McFadden): 0.304\n",
                        "Pseudo R-squared (McFadden adjusted): 0.298\n",
                        "Area under the RO Curve (AUC): 0.839\n",
                        "Log-likelihood: -490.864, AIC: 991.728, BIC: 1016.477\n",
                        "Chi-squared: 428.257, df(4), p.value < 0.001 \n",
                        "Nr obs: 1,043\n"
                    ]
                }
            ],
            "source": [
                "lr = rsm.model.logistic(\n",
                "    {\"titanic\": titanic}, rvar=\"survived\", lev=\"Yes\", evar=[\"pclass\", \"sex\", \"age\"]\n",
                ")\n",
                "lr.summary()\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 7,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "Logistic regression (GLM)\n",
                        "Data                 : titanic\n",
                        "Response variable    : survived\n",
                        "Level                : Yes\n",
                        "Explanatory variables: pclass, sex, age\n",
                        "Null hyp.: There is no effect of x on survived\n",
                        "Alt. hyp.: There is an effect of x on survived\n",
                        "\n",
                        "                 OR      OR%  coefficient  std.error  z.value p.value     \n",
                        "Intercept    33.607  3260.7%         3.51      0.327   10.752  < .001  ***\n",
                        "pclass[2nd]   0.280   -72.0%        -1.27      0.226   -5.649  < .001  ***\n",
                        "pclass[3rd]   0.102   -89.8%        -2.28      0.226  -10.104  < .001  ***\n",
                        "sex[male]     0.083   -91.7%        -2.49      0.166  -14.996  < .001  ***\n",
                        "age           0.966    -3.4%        -0.03      0.006   -5.437  < .001  ***\n",
                        "\n",
                        "Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n",
                        "\n",
                        "Pseudo R-squared (McFadden): 0.304\n",
                        "Pseudo R-squared (McFadden adjusted): 0.298\n",
                        "Area under the RO Curve (AUC): 0.839\n",
                        "Log-likelihood: -490.864, AIC: 991.728, BIC: 1016.477\n",
                        "Chi-squared: 428.257, df(4), p.value < 0.001 \n",
                        "Nr obs: 1,043\n"
                    ]
                }
            ],
            "source": [
                "lr = rsm.model.logistic({\"titanic\":titanic}, lev=\"Yes\", form=\"survived ~ pclass + sex + age\")\n",
                "lr.summary()\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 8,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "Logistic regression (GLM)\n",
                        "Data                 : titanic\n",
                        "Response variable    : survived\n",
                        "Level                : Yes\n",
                        "Explanatory variables: pclass, sex, age\n",
                        "Null hyp.: There is no effect of x on survived\n",
                        "Alt. hyp.: There is an effect of x on survived\n",
                        "\n",
                        "                 OR      OR%  coefficient  std.error  z.value p.value     \n",
                        "Intercept    33.607  3260.7%         3.51      0.327   10.752  < .001  ***\n",
                        "pclass[2nd]   0.280   -72.0%        -1.27      0.226   -5.649  < .001  ***\n",
                        "pclass[3rd]   0.102   -89.8%        -2.28      0.226  -10.104  < .001  ***\n",
                        "sex[male]     0.083   -91.7%        -2.49      0.166  -14.996  < .001  ***\n",
                        "age           0.966    -3.4%        -0.03      0.006   -5.437  < .001  ***\n",
                        "\n",
                        "Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n",
                        "\n",
                        "Pseudo R-squared (McFadden): 0.304\n",
                        "Pseudo R-squared (McFadden adjusted): 0.298\n",
                        "Area under the RO Curve (AUC): 0.839\n",
                        "Log-likelihood: -490.864, AIC: 991.728, BIC: 1016.477\n",
                        "Chi-squared: 428.257, df(4), p.value < 0.001 \n",
                        "Nr obs: 1,043\n",
                        "\n",
                        "Model 1: survived ~ age + sex\n",
                        "Model 2: survived ~ pclass + sex + age\n",
                        "Pseudo R-squared, Model 1 vs 2: 0.220 vs 0.304\n",
                        "Chi-squared: 117.967 df (2), p.value < .001\n"
                    ]
                }
            ],
            "source": [
                "lr.summary(test=\"pclass\")\n"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "In addition to the numerical output provided in the _Summary_ tab we can also evaluate the link between `survival`, `class`, `sex`, and `age` visually (see _Plot_ tab). In the screenshot below we see a coefficient (or rather an odds-ratio) plot with confidence intervals. The relative importance of gender and class compared to age clearly stands out. Note: click the check box for standardized coefficients (i.e., `standardize`) in the _Summary_ tab and see if your conclusion changes."
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 9,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "image/png": "",
                        "text/plain": [
                            "<Figure size 640x480 with 1 Axes>"
                        ]
                    },
                    "metadata": {},
                    "output_type": "display_data"
                }
            ],
            "source": [
                "lr.plot()\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 10,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "image/png": "",
                        "text/plain": [
                            "<Figure size 1000x800 with 3 Axes>"
                        ]
                    },
                    "metadata": {},
                    "output_type": "display_data"
                }
            ],
            "source": [
                "lr.plot(plots=\"pred\")\n"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 11,
            "metadata": {},
            "outputs": [
                {
                    "data": {
                        "image/png": "",
                        "text/plain": [
                            "<Figure size 600x500 with 1 Axes>"
                        ]
                    },
                    "metadata": {},
                    "output_type": "display_data"
                }
            ],
            "source": [
                "lr.plot(plots=\"vimp\")\n"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "# Radiant for Python App: Logistic regression (GLM)\n",
                "\n",
                "All the output shown above can be reproduced using the Radiant-for-Python web interface. An example of what the code required to start the web interface is shown below. See if you can reproduce the result.\n",
                "\n",
                "> Note: The app will continue running until you press the `Stop` button in the app navigation bar or the stop button next to the notebook cell"
            ]
        },
        {
            "cell_type": "code",
            "execution_count": 12,
            "metadata": {},
            "outputs": [
                {
                    "name": "stdout",
                    "output_type": "stream",
                    "text": [
                        "Listening on http://0.0.0.0:8000\n",
                        "Pyrsm and Radiant are open source tools and free to use. If you\n",
                        "are a student or instructor using pyrsm or Radiant for a class,\n",
                        "as a favor to the developers, please send an email to\n",
                        "<radiant@rady.ucsd.edu> with the name of the school and class.\n",
                        "If you are using Radiant in your company, as a favor to the\n",
                        "developer, please share the name of your company and what types\n",
                        "of activites you are supporting with the tool.\n"
                    ]
                },
                {
                    "data": {
                        "text/markdown": [
                            "```python\n",
                            "import pyrsm as rsm\n",
                            "\n",
                            "# titanic = pd.read_parquet('titanic.parquet')\n",
                            "lr = rsm.model.logistic(\n",
                            "    data={\"titanic\": titanic}, rvar=\"survived\", lev=\"Yes\", evar=[\"pclass\", \"sex\", \"age\"]\n",
                            ")\n",
                            "lr.plot(plots=\"pred\", incl=[\"pclass\", \"sex\", \"age\"])\n",
                            "\n",
                            "```"
                        ],
                        "text/plain": [
                            "<IPython.core.display.Markdown object>"
                        ]
                    },
                    "metadata": {},
                    "output_type": "display_data"
                },
                {
                    "data": {
                        "text/plain": [
                            "<Figure size 640x480 with 0 Axes>"
                        ]
                    },
                    "metadata": {},
                    "output_type": "display_data"
                }
            ],
            "source": [
                "rsm.radiant.logistic({\"titanic\": titanic}, {\"titanic\": titanic_description}, code=True)"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "<p align=\"center\">\n",
                "<img src=\"figures/logistic-regression-summary.png\">\n",
                "</p>"
            ]
        },
        {
            "cell_type": "markdown",
            "metadata": {},
            "source": [
                "<p align=\"center\">\n",
                "<img src=\"figures/logistic-regression-pred-plots.png\">\n",
                "</p>"
            ]
        }
    ],
    "metadata": {
        "kernelspec": {
            "display_name": "Python 3.10.4 ('pyrsm-dev')",
            "language": "python",
            "name": "python3"
        },
        "language_info": {
            "codemirror_mode": {
                "name": "ipython",
                "version": 3
            },
            "file_extension": ".py",
            "mimetype": "text/x-python",
            "name": "python",
            "nbconvert_exporter": "python",
            "pygments_lexer": "ipython3",
            "version": "3.10.10"
        },
        "vscode": {
            "interpreter": {
                "hash": "bbba8b880f8e16fea63b45a2473043b3a2eb4895c09d1c8a67b72e7583b44428"
            }
        }
    },
    "nbformat": 4,
    "nbformat_minor": 4
}